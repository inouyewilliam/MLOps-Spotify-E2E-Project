name: CI-CD-Pipeline
on: [push]
jobs:
  CICD-and-report:
    runs-on: ubuntu-latest
    env:
      DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
      DAGSHUB_API_TOKEN: ${{ secrets.DAGSHUB_API_TOKEN }}
      #MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      #MLFLOW_API_TOKEN: ${{ secrets.MLFLOW_API_TOKEN }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: pip

      - name: Set up DVC
        uses: iterative/setup-dvc@v1
        
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      #- name: Authenticate with DAGsHub
        #env:
            #DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
            #DAGSHUB_API_TOKEN: ${{ secrets.DAGSHUB_API_TOKEN }}
        #run: |
          #echo "machine dagshub.com login $DAGSHUB_USERNAME token $DAGSHUB_API_TOKEN" > ~/.netrc
      
      - name: Set up environment variables
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          echo "CLIENT_ID=${CLIENT_ID}" >> .env
          echo "CLIENT_SECRET=${CLIENT_SECRET}" >> .env
          
      - name: Pull data
        run: |
          dvc remote modify origin --local auth basic
          dvc remote modify origin --local user ${{ secrets.DAGSHUB_USERNAME }}
          dvc remote modify origin --local password ${{ secrets.DAGSHUB_API_TOKEN }}
          dvc pull -r origin
          
      - name: Run dvc pipeline
        run: | 
          dvc repro
          
      - name: Clean up environment variables
        run: |
          rm .env

      - name: push data to remote repo
        run: |                  
          dvc push -r origin
                
      #- name: report
          # Create CML report
          #cat metrics.txt >> report.md
          #echo '![](./plot.png "Confusion Matrix")' >> report.md
          #cml comment create report.md
